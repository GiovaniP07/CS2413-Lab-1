#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int *data;
    int top;
    int capacity;
} Stack;

Stack* createStack(int capacity) {
    Stack* s = (Stack*)malloc(sizeof(Stack));
    s->capacity = capacity;
    s->data = (int*)malloc(sizeof(int) * capacity);
    s->top = -1;
    return s;
}

bool stackIsEmpty(Stack* s) {
    return s->top == -1;
}

void stackPush(Stack* s, int x) {
    s->data[++s->top] = x;
}

int stackPop(Stack* s) {
    return s->data[s->top--];
}

int stackTop(Stack* s) {
    return s->data[s->top];
}

typedef struct {
    Stack* s1;
    Stack* s2;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->s1 = createStack(100);
    queue->s2 = createStack(100);
    return queue;
}

void myQueuePush(MyQueue* obj, int x) {
    stackPush(obj->s1, x);
}

int myQueuePop(MyQueue* obj) {
    if (stackIsEmpty(obj->s2)) {
        while (!stackIsEmpty(obj->s1)) {
            stackPush(obj->s2, stackPop(obj->s1));
        }
    }
    return stackPop(obj->s2);
}

int myQueuePeek(MyQueue* obj) {
    if (stackIsEmpty(obj->s2)) {
        while (!stackIsEmpty(obj->s1)) {
            stackPush(obj->s2, stackPop(obj->s1));
        }
    }
    return stackTop(obj->s2);
}

bool myQueueEmpty(MyQueue* obj) {
    return stackIsEmpty(obj->s1) && stackIsEmpty(obj->s2);
}

void myQueueFree(MyQueue* obj) {
    free(obj->s1->data);
    free(obj->s2->data);
    free(obj->s1);
    free(obj->s2);
    free(obj);
}

int main(){
    printf("Program is running");
    return 0;
}
